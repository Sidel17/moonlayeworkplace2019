// <auto-generated />
using System;
using ExtCore.Data.EntityFramework.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.WebApp.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20190802071147_Alter2")]
    partial class Alter2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Checkins.Data.Entities.Checkin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsLate");

                    b.Property<string>("Location")
                        .HasMaxLength(225);

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Checkins");
                });

            modelBuilder.Entity("Employees.Data.Entities.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Employees.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Employees.Data.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastEducation")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Employees.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId");

                    b.Property<DateTimeOffset>("BirthDate");

                    b.Property<string>("BirthLocation")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<decimal>("CashOutLeave");

                    b.Property<int>("ComplimentLeaveTotal");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<int>("DebtHour");

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("DepartmentId");

                    b.Property<int>("EducationId");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("EmergencyContactRelationship")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("EmployeeRoleId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Gender");

                    b.Property<int>("Grading");

                    b.Property<int>("GradingTitleId");

                    b.Property<int>("IdentityCardNumber");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("InitialName")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("JoinDate");

                    b.Property<string>("KTPAddress")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("LastEducation");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("LeaveTotal");

                    b.Property<string>("LineManager")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("MaritalStatus");

                    b.Property<decimal>("MedicalPlafon");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("NPWP");

                    b.Property<string>("NPWPAddress");

                    b.Property<string>("NoSurat")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("OfficeEmail")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("PassProbation");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("PersonalEmail")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("ReasonLeaving")
                        .HasMaxLength(225);

                    b.Property<int>("ReligionId");

                    b.Property<int>("RemainingComplimentLeave");

                    b.Property<int>("RemainingLeave");

                    b.Property<int>("RemainingSickLeave");

                    b.Property<DateTimeOffset>("ResignationDate");

                    b.Property<decimal>("Salary");

                    b.Property<int>("SickLeaveTotal");

                    b.Property<string>("SpecialNotes")
                        .HasMaxLength(225);

                    b.Property<int>("StatusWorker");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("TransferDate");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("WorkPlacementId");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EducationId");

                    b.HasIndex("EmployeeRoleId");

                    b.HasIndex("GradingTitleId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("WorkPlacementId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Employees.Data.Entities.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Employees.Data.Entities.GradingTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<string>("GradingName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("GradingTitles");
                });

            modelBuilder.Entity("Employees.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Employees.Data.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Employees.Data.Entities.WorkPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("OfficeAddress")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.HasKey("Id");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("Leaves.Data.Entities.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<string>("JobOverTo")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("LeaveType");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(65);

                    b.Property<DateTimeOffset>("StartDate");

                    b.Property<double>("TotalLeaveTaken");

                    b.HasKey("Id");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Leaves.Data.Entities.LeaveApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ApprovalDate");

                    b.Property<int>("ApprovalStatus");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("LeaveId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("LeaveId");

                    b.ToTable("LeaveApprovalHistory");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.QuickLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("FinishTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("RequestTo")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TotalOvertime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("QuickLeaves");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.QuickLeaveApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ApprovalDate");

                    b.Property<int>("ApprovalStatusQuickLeave");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("QuickLeaveId");

                    b.HasKey("Id");

                    b.HasIndex("QuickLeaveId");

                    b.ToTable("QuickLeaveApprovalHistory");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestBusinesstrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("DateBusinessTrip");

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<double>("TotalCostNominal");

                    b.Property<double>("TotalCostReimburse");

                    b.HasKey("Id");

                    b.ToTable("RequestBusinesstrips");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestBusinesstripApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ApprovalDate");

                    b.Property<int>("ApprovalStatusRequestBusinesstrip");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("RequestBusinessTripId");

                    b.HasKey("Id");

                    b.HasIndex("RequestBusinessTripId");

                    b.ToTable("RequestBusinesstripApprovalHistory");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("DateRequestMedical");

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("MedicationType")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<double>("TotalCostNominal");

                    b.Property<double>("TotalCostReimburse");

                    b.HasKey("Id");

                    b.ToTable("RequestMedicals");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestMedicalApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ApprovalDate");

                    b.Property<int>("ApprovalStatusRequestMedical");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("RequestMedicalId");

                    b.HasKey("Id");

                    b.HasIndex("RequestMedicalId");

                    b.ToTable("RequestMedicalApprovalHistory");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestOvertime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("DateOvertime");

                    b.Property<string>("DeleteBy");

                    b.Property<DateTimeOffset?>("Deleted");

                    b.Property<int>("DepartmentId");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("FinishTime");

                    b.Property<int>("GroupId");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MealReimbursement");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("OvertimeType");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("RequestTo")
                        .HasMaxLength(64);

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TotalOvertime");

                    b.Property<int>("TransportReimbursement");

                    b.HasKey("Id");

                    b.ToTable("RequestOvertimes");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestOvertimeApprovalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("ApprovalDate");

                    b.Property<int>("ApprovalStatusRequestOvertime");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("RequestOvertimeId");

                    b.HasKey("Id");

                    b.HasIndex("RequestOvertimeId");

                    b.ToTable("RequestOvertimeApprovalHistory");
                });

            modelBuilder.Entity("Timesheets.Data.Entities.EmployeeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset>("EndDate");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("ProjectId");

                    b.Property<int>("SprintNumber");

                    b.Property<DateTimeOffset>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("SprintId");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(225);

                    b.Property<bool>("isStarted");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("EmployeeId");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(64);

                    b.Property<int>("SprintId");

                    b.Property<DateTimeOffset>("StartTime");

                    b.Property<int>("TaskId");

                    b.Property<DateTimeOffset>("TimesheetDate");

                    b.Property<int>("TotalTimeByTask");

                    b.Property<int>("TotalTimeToday");

                    b.Property<bool>("isStarted");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("Employees.Data.Entities.Employee", b =>
                {
                    b.HasOne("Employees.Data.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.EmployeeRole", "EmployeeRole")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.GradingTitle", "GradingPosition")
                        .WithMany()
                        .HasForeignKey("GradingTitleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.Religion", "Faith")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Employees.Data.Entities.WorkPlacement", "WorkPlacement")
                        .WithMany()
                        .HasForeignKey("WorkPlacementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Employees.Data.Entities.EmployeeRole", b =>
                {
                    b.HasOne("Employees.Data.Entities.Group", "Group")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Leaves.Data.Entities.LeaveApprovalHistory", b =>
                {
                    b.HasOne("Leaves.Data.Entities.Leave", "Leave")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("LeaveId");
                });

            modelBuilder.Entity("Reimburses.Data.Entities.QuickLeave", b =>
                {
                    b.HasOne("Employees.Data.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reimburses.Data.Entities.QuickLeaveApprovalHistory", b =>
                {
                    b.HasOne("Reimburses.Data.Entities.QuickLeave", "QuickLeave")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("QuickLeaveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestBusinesstripApprovalHistory", b =>
                {
                    b.HasOne("Reimburses.Data.Entities.RequestBusinesstrip", "RequestBusinesstrip")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("RequestBusinessTripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestMedicalApprovalHistory", b =>
                {
                    b.HasOne("Reimburses.Data.Entities.RequestMedical", "RequestMedical")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("RequestMedicalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Reimburses.Data.Entities.RequestOvertimeApprovalHistory", b =>
                {
                    b.HasOne("Reimburses.Data.Entities.RequestOvertime", "RequestOvertime")
                        .WithMany("ApprovalHistory")
                        .HasForeignKey("RequestOvertimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Timesheets.Data.Entities.EmployeeDetail", b =>
                {
                    b.HasOne("Timesheets.Data.Entities.Project", "Project")
                        .WithMany("EmployeeDetails")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Sprint", b =>
                {
                    b.HasOne("Timesheets.Data.Entities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Task", b =>
                {
                    b.HasOne("Timesheets.Data.Entities.Sprint", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Timesheets.Data.Entities.Timesheet", b =>
                {
                    b.HasOne("Timesheets.Data.Entities.Sprint", "Sprint")
                        .WithMany("Timesheets")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
